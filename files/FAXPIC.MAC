	.TITLE	FAXPIC	Convert NFAX file to Sun format
	.NLIST	BEX
	.ENABL	LC
;
; FAXPIC Convert NFAX file to Sun format
;
; This program reads a weather-fax file encoded in AEA PAKRATT 232 format and
; constructs a bitmap file in Sun format.
;
; Note: Each horizontal scan line is 500 ms and sampled 960 times. Weather
; recorders have a 19"-square raster with 96 lines per inch. which yields a
; 960 x 1920 raster (with sync) at 1:1 aspect ratio. This program can operate
; at two scan densities: /a:0 (ASPECT 3), which outputs each scan line as a
; separate line, or /a:1 (ASPECT 6), which folds every other scan line. The
; latter is necessary to avoid loss of some lines in the PAKRATT 232.
;
; Options
; /a:n	fold n lines (default 0)
; /s:n	start after n lines (default 0)
; /i	invert
; /x	postscript output
; /h	hex input
; /t	trace
; /l	lock
;
; External symbols
;
	.GLOBL	FORMAT		;output format
;
; Entry symbols
;
	.GLOBL	PRBYT		;display byte
;
; System definitions
;
	.ASECT
	.MCALL	.CSIGE,.EXIT,.PRINT ;rt-11 definitions
	.MCALL	.WRITW,.READW,.CLOSE,.PURGE,.TTYOU
	.MCALL	FORMAT		;netlib macros
;
; Assembly parameters
;
MAXSIZ	=	8.		;max buffer size (blocks)
MAXLIN	=	80.		;max line size
PXMAX	=	960.		;max x pels
PYMAX	=	960.		;max y pels
PULSE	=	PXMAX/20.	;sync width (pels)
THRESH	=	600.		;synch threshold
BLACK	=	10.		;black leader lines
HZ300	=	10.		;300-Hz leader lines
SYNC	=	60.		;sync lines
HZ450	=	10.		;450-Hz trailer lines
EOT	=	004		;end of transmission
LF	=	012		;line feed
CR	=	015		;carriage return
ESC	=	033		;escape
;
; Sun image file header
; (32-bit byte-swapped doublewords)
;
.	=	0
RS.MAG:	.BLKW	2		;(ras_magic) magic number
RS.WID:	.BLKW	2		;(ras_width) width (pels) of image
RS.HGH:	.BLKW	2		;(ras_height) height (pels) of image
RS.DPT:	.BLKW	2		;(ras_depth) depth (1,8,24 bits) of pel
RS.IMG:	.BLKW	2		;(ras_length) length (bytes) of image
RS.TYP:	.BLKW	2		;(ras_type) type of file
RS.COL:	.BLKW	2		;(ras_maptype) type of colormap
RS.MAP:	.BLKW	2		;(ras_maplength) length (bytes) of color map
RS.LEN	=	.		;length of header
;
; Procedure segment
;
	.PSECT	$BOSI,RO,I
;
; Entry point
;
START:	BIS	#40000,@#44	;disable folding
NXTFIL:	MOV	@#42,SP		;safety first
	CLR	MODE		;initialize
	CLR	INVSW
	CLR	HEXSW
	CLR	TRCSW
	CLR	SYNSW
	CLR	ASPECT
	CLR	RASTER
	.CSIGE	@#50,#DEFEXT,#0	;get file spec
	BCS	NXTFIL		;branch if error
	TST	(SP)+		;pop off count
1$:	CMP	SP,@#42		;more switches specified
	BHIS	HEADR		;branch if no
	MOV	(SP)+,R1	;get option switch
	CMPB	R1,#140
	BLO	2$
	SUB	#040,R1
2$:	TST	R1
	BPL	4$		;branch if no value
	MOV	(SP)+,R0	;value. retrieve it
	CMPB	R1,#'A		;is this a:value
	BNE	3$		;branch if no
	MOV	R0,ASPECT	;yes. store fold switch
	BR	1$
;
3$:	CMPB	R1,#'S		;is this s:value
	BNE	1$		;branch if no
	MOV	R0,RASTER	;yes. stash line number
	BR	1$
;
4$:	CMPB	R1,#'I		;is this i
	BNE	5$		;branch if no
	COM	INVSW		;yes. set invert switch
	BR	1$
;
5$:	CMPB	R1,#'H		;is this h
	BNE	6$		;branch if no
	COM	HEXSW		;yes. set hex switch
	BR	1$
;
6$:	CMPB	R1,#'T		;is this t
	BNE	7$		;branch if no
	COM	TRCSW		;yes. set trace switch
	BR	1$
;
7$:	CMPB	R1,#'L		;is this l
	BNE	8$		;branch if no
	INC	SYNSW		;yes. set synch switch
	INC	OUTSW
	BR	1$
;
8$:	MOV	R1,MODE		;stash data type
	BR	1$
;
; Construct Sun bitmap header
;
HEADR:	MOV	#PXMAX,R0	;calculate total length (pels)
	MUL	#PYMAX,R0
	ASHC	#-3.,R0		;convert to bytes
	MOV	R0,LENGTH
	MOV	R1,LENGTH+2
	MOV	#OUTBUF,R3	;initialize output file header
	CMPB	MODE,#'X	;is this hexshine
	BNE	2$		;branch if no
	CLR	LINCNT		;yes. initialize for postscript output
	MOV	#PREAMB,R1	;copy preamble
1$:	MOVB	(R1)+,(R3)+
	BNE	1$
	BR	3$		;continue body
;
2$:	MOV	MAGIC,(R3)+	;(rs.mag) initialize for sunshine output
	MOV	MAGIC+2,(R3)+
	CLR	(R3)+		;(rs.width)
	MOV	#PXMAX,@R3
	SWAB	(R3)+
	CLR	(R3)+		;(rs.height)
	MOV	#PYMAX,@R3
	SWAB	(R3)+
	CLR	(R3)+		;(rs.depth)
	MOV	#1*400,(R3)+
	MOV	LENGTH,R0	;(rs.length)
	SWAB	R0
	MOV	R0,(R3)+
	MOV	LENGTH+2,R0
	SWAB	R0
	MOV	R0,(R3)+
	CLR	(R3)+		;(rs.typ) specify b/w (standard)
	MOV	#1*400,(R3)+
	CLR	(R3)+		;(rs.col)
	CLR	(R3)+
	CLR	(R3)+		;(rs.map)
	CLR	(R3)+
3$:	MOV	R3,OUTPTR
	CLR	BYTCNT		;complete initialization
	CLR	INPBLK
	CLR	OUTBLK
	CLR	RSTCNT
	CLR	OUTSW		;reset filter
	MOV	#FILTER,R1
	MOV	#PXMAX,R0
4$:	CLR	(R1)+		;(shift reg)
	CLR	(R1)+		;(accum)
	SOB	R0,4$
;
; Skip to selected line
;
INPUT:	CLR	SLPCNT		;keep track of broken frames
	TST	LENGTH		;is output raster complete
	BNE	1$		;branch if no
	TST	LENGTH+2
	BEQ	7$		;branch if yes
1$:	JSR	PC,BINL		;no. skip to end of this frame
	BCS	7$		;branch if eof
	CMP	R0,#ESC		;(esc)
	BEQ	3$
	INC	SLPCNT
	BR	1$
;
2$:	JSR	PC,BINL		;skip to beginning of next frame
	BCS	7$		;branch if eof
	CMP	R0,#ESC		;(esc)
	BNE	2$
3$:	JSR	PC,BINL
	BCS	7$		;branch if eof
	CMP	R0,#ESC
	BEQ	3$
	CMP	R0,#'L		;(96 lpi)
	BNE	2$
	JSR	PC,BINL
	BCS	7$		;branch if eof
	CMP	R0,#ESC
	BEQ	3$
	CMP	R0,#300		;(low-order count)
	BNE	2$
	JSR	PC,BINL
	BCS	7$		;branch if eof
	CMP	R0,#ESC
	BEQ	3$
	CMP	R0,#003		;(high-order count)
	BNE	2$
	INC	RSTCNT
	TST	SLPCNT		;was data lost
	BEQ	4$		;branch if no
	FORMAT	#COM19,#FMTBAS	;yes. record the fact
4$:	MOV	#SCANLN,R1	;get next line
	MOV	#PXMAX,R2
5$:	JSR	PC,BINL
	BCS	7$		;branch if eof
	TST	INVSW		;invert if requested
	BEQ	6$
	COM	R0
6$:	MOVB	R0,(R1)+
	SOB	R2,5$
	CMP	RSTCNT,RASTER	;is this selected line
	BHIS	SCAN		;branch if yes
	BR	INPUT		;no. get next line
;
7$:	JMP	DONE
;
; Scan line and encode bitmap
;
SCAN:	MOV	#8.,R4		;encode bitmap
	TST	ASPECT
	BEQ	1$
	MOV	#4,R4
1$:	MOV	#SCANLN,R1
	MOV	#FILTER,R2
	CLR	ACCUM		;reset filter
	CLR	ACCMAX
	CLR	SYNCNT
2$:	MOV	#8.,R3
	TST	ASPECT		;is this double-scanned
	BNE	6$		;branch if yes
;
; Single scan
;
3$:	ROLB	(R1)+		;shift next bit
	BCC	4$		;branch if white
	ROLB	R0		;black. output that
	SEC
	ROL	(R2)+
	BCS	5$
	INC	@R2
	BR	5$
;
4$:	ROLB	R0		;white. output that
	CLC
	ROL	(R2)+
	BCC	5$
	DEC	@R2
5$:	TST	(R2)+		;test synch
	JSR	PC,SYNCH
	SOB	R3,3$		;continue for eight pels
	BR	11$
;
; Double scan
;
6$:	ROLB	@R1		;get pel from first row
	BCC	7$		;branch if white
	ROLB	R0		;black. output that
	ROLB	(R1)+
	BR	8$
;
7$:	ROLB	(R1)+		;black. output pel from second row
	BCC	9$		;branch if white
	ROLB	R0		;black. output that
8$:	SEC
	ROL	(R2)+
	BCS	10$
	INC	@R2
	BR	10$
;
9$:	ROLB	R0		;white. output that
	CLC
	ROL	(R2)+
	BCC	10$
	DEC	@R2
10$:	TST	(R2)+		;test synch
	JSR	PC,SYNCH
	SOB	R3,6$		;continue for eight pels
;
; Output assembled byte
;
11$:	JSR	PC,BOUT		;output byte
	CMP	R1,#SCANLN+PXMAX ;is this end of row
	BLO	2$		;branch if no
	TST	TRCSW		;trace if requested
	BEQ	12$
	FORMAT	#COM16,#FMTBAS
12$:	TST	SYNSW		;is this synchronized
	BNE	13$		;branch if yes
	CMP	ACCMAX,#THRESH	;no. is threshold exceeded
	BLE	13$		;branch if no
	FORMAT	#COM18,#FMTBAS	;yes. advertise that fact
	INC	SYNSW
13$:	DEC	R4
	BNE	1$		;continue for four/eight lines
	JMP	INPUT
;
; Scan complete
;
DONE:	TST	OUTSW		;did it ever synchronize
	BEQ	8$		;branch if no
	FORMAT	#COM17,#FMTBAS	;yes. advertise that fact
1$:	TST	LENGTH		;is raster complete
	BNE	2$		;branch if no
	TST	LENGTH+2
	BEQ	3$		;branch if yes
2$:	CLR	R0		;no. fill with zero
	JSR	PC,BOUT
	BR	1$
;
3$:	CMPB	MODE,#'X	;is this hexshine
	BNE	5$		;branch if no
	MOV	#POSAMB,R1	;yes. copy postamble
4$:	MOVB	(R1)+,R0
	BEQ	5$		;branch when done
	JSR	PC,YOUT
	BR	4$
;
5$:	MOV	OUTPTR,R1	;is buffer empty
	SUB	#OUTBUF,R1
	BEQ	7$		;branch if yes
	BIT	#777,R1		;no. is this block boundary
	BEQ	6$		;branch if yes
	CLR	R0		;no. zero-fill remainder
	JSR	PC,YOUT
	BR	5$
;
6$:	ASR	R1		;write last buffer
	.WRITW	#ARGBLK,#0,#OUTBUF,R1,OUTBLK
	BCC	7$		;branch if ok
	.PRINT	#COM21		;file write error
	.PURGE	#0
	BR	8$
;
7$:	.CLOSE	#0		;close output file
8$:	JMP	NXTFIL
;
; Subroutine to process filter
;
SYNCH:	TST	SYNSW		;is we syunch
	BEQ	2$
	TST	OUTSW
	BNE	1$
	TST	MAXCNT
	BEQ	1$
	DEC	MAXCNT
	BNE	1$
	INC	OUTSW
1$:	TST	TRCSW
	BEQ	4$
2$:	INC	SYNCNT
	MOV	R2,R5
	SUB	-(R5),ACCUM
	SUB	#PULSE*4,R5
	CMP	R5,#FILTER
	BHIS	3$	
	ADD	#PXMAX*4,R5
3$:	ADD	@R5,ACCUM
	CMP	ACCUM,ACCMAX
	BLE	4$
	MOV	ACCUM,ACCMAX
	MOV	SYNCNT,MAXCNT
	SUB	#PULSE-10.,MAXCNT
	BGT	4$
	ADD	#PXMAX,MAXCNT
4$:	RTS	PC
;
; Subroutine to input octet
; Returns r0 = octet, c(cc) = 1 if eof, to main loop if error
;
BINL:	TST	HEXSW		;is this hex
	BEQ	BINY		;branch if no
	MOV	R1,-(SP)	;yes. save
1$:	JSR	PC,HEX		;get first nybble
	BR	2$		;0 eof
	BR	1$		;2 cr
	ASH	#4,R0		;4 data
	MOV	R0,R1
	JSR	PC,HEX		;get second nybble
	BR	2$		;0 eof
	BR	1$		;2 cr
	BIS	R1,R0		;4 data
	CLC
	BR	3$
;
2$:	SEC			;eof exit
3$:	MOV	(SP)+,R1	;evas
	RTS	PC
;
HEX:	JSR	PC,BINY		;read next byte
	BCS	4$		;branch if eof
	BIC	#^C177,R0	;decode byte
	CMP	R0,#CR
	BEQ	3$		;branch if cr (resynch)
	CMP	R0,#'F
	BHI	HEX		;branch if invalid
	CMP	R0,#'A
	BHIS	2$		;branch if alpha
	CMP	R0,#'9
	BHI	HEX		;branch if invalid
	CMP	R0,#'0
	BLO	HEX		;branch if invalid
	SUB	#'0-'A+10.,R0	;numeric
2$:	SUB	#'A-10.,R0	
	BIC	#^C17,R0	;valid nybble
	ADD	#2,@SP		;4 data
3$:	ADD	#2,@SP		;2 cr
4$:	RTS	PC		;0 eof
;
; Subroutine to read next octet
; returns r0 = octet
;
BINY:	TST	BYTCNT		;is buffer empty
	BNE	1$		;branch if no
	.READW	#ARGBLK,#3,#INPBUF,#MAXSIZ*256.,INPBLK ;yes. read next buffer
	BCS	2$		;branch if error
	ASL	R0		;ok. update pointers
	MOV	R0,BYTCNT
	ADD	#MAXSIZ,INPBLK
	MOV	#INPBUF,INPPTR
1$:	CLR	R0		;read octet
	BISB	@INPPTR,R0
	INC	INPPTR
	DEC	BYTCNT
	CLC			;normal exit
	RTS	PC
;
2$:	TSTB	@#52		;bad read. is it eof
	BNE	3$		;branch if no
	SEC			;yes. exception exit
	RTS	PC
;
3$:	.PRINT	#COM20		;file read error
	JMP	NXTFIL
;
; Subroutine to output data octet
; r0 = octet
;	
BOUT:	TST	OUTSW		;is we syunch
	BEQ	2$		;branch if no
	TST	LENGTH		;is file full
	BNE	1$		;branch if no
	TST	LENGTH+2
	BEQ	2$		;branch if yes
1$:	SUB	#1,LENGTH+2	;no. update residual octets
	SBC	LENGTH
	CMPB	MODE,#'X	;is this hex
	BEQ	3$		;branch if yes
	JSR	PC,YOUT
2$:	RTS	PC
;
3$:	COM	R0		;hex (apples are inverted)
	MOV	R0,-(SP)	;save data word
	ASH	#-4.,R0		;hex 1
	JSR	PC,WOUT
	MOV	(SP)+,R0	;hex 2
	JSR	PC,WOUT
	RTS	PC
;
; Subroutine to encode and output hex octet
; r0 = octet
;
WOUT:	BIC	#^C17,R0	;convert to hex
	MOVB	HEXTAB(R0),R0
	JSR	PC,YOUT		;output hexit
	INC	LINCNT		;is this end of line
	CMP	LINCNT,#MAXLIN
	BLO	1$		;branch if no
	MOV	#CR,R0		;yes. output cr/lf
	JSR	PC,YOUT
	MOV	#LF,R0
	JSR	PC,YOUT
	CLR	LINCNT
1$:	RTS	PC
;
; Suborutine to output octet
; r0 = octet, return to main loop if error
;
YOUT:	MOVB	R0,@OUTPTR	;stash octet
	INC	OUTPTR
	CMP	OUTPTR,#OUTEND	;is buffer full
	BLO	1$		;branch if no
	.WRITW	#ARGBLK,#0,#OUTBUF,#MAXSIZ*256.,OUTBLK ;yes. write block
	BCS	2$		;branch if error
	ADD	#MAXSIZ,OUTBLK	;initialize pointers
	MOV	#OUTBUF,OUTPTR
1$:	RTS	PC
;
2$:	.PRINT	#COM21		;file write error
	.PURGE	#0
	JMP	NXTFIL
;
; Subroutine to output byte to terminal
; R0 = byte
;
PRBYT:	.TTYOU			;put byte
	RTS	PC
;
; Data segment
;
	.PSECT	$BOSD,RO,D
;
MAGIC:	.WORD	123131,112552	;sun image file magic identifier (?!)
DEFEXT:	.RAD50	'FAXBITBITBIT'	;default extensions
HEXTAB:	.ASCII	'0123456789ABCDEF' ;hex convert table
COM19:	.ASCIZ	'?FAXPIC-I-Line ^I'<RSTCNT-FMTBAS>' skipped ^I'<SLPCNT-FMTBAS>
COM18:	.ASCII	'?FAXPIC-I-Line ^I'<RSTCNT-FMTBAS>' synchronized '
	.ASCIZ	'^I'<ACCMAX-FMTBAS>' ^I'<MAXCNT-FMTBAS>
COM17:	.ASCIZ	'?FAXPIC-I-Line ^I'<RSTCNT-FMTBAS>' end of raster'
COM16:	.ASCII	'?FAXPIC-I-Line ^I'<RSTCNT-FMTBAS>' trace '
	.ASCIZ	'^I'<ACCMAX-FMTBAS>' ^I'<MAXCNT-FMTBAS>
COM20:	.ASCIZ	'?FAXPIC-F-File read error'
COM21:	.ASCIZ	'?FAXPIC-F-File write error'
;
; PostScript procedures
;
PREAMB:	.ASCII	<EOT>
	.ASCII	'save			% save state'<CR><LF>
	.ASCII	'initgraphics		% initialize page'<CR><LF>
	.ASCII	'erasepage'<CR><LF>
	.ASCII	'/picstr 40 string def	% string to hold image data'<CR><LF>
	.ASCII	'18 684 translate	% relocate origin'<CR><LF>
	.ASCII	'-90 rotate		% switch to portrait mode'<CR><LF>
	.ASCII	'576 576 scale		% map image to fill page'<CR><LF>
	.ASCII	'960 960 1		% width height bits/sample'<CR><LF>
	.ASCII	'[960 0 0 -960 0 960]	% map unit square to source'<CR><LF>
	.ASCII	'{currentfile picstr	% read image data'<CR><LF>
	.ASCII	'readhexstring pop}'<CR><LF>
	.ASCIZ	'image'<CR><LF>
;
POSAMB:	.ASCII	'showpage		% etch page'<CR><LF>
	.ASCIZ	'restore			% restore state'<CR><LF>
	.EVEN
;
; Variables
;
FMTBAS	=	.		;format base
ARGBLK:	.BLKW	5		;rt-11 argument block
LENGTH:	.BLKW	2		;residual output octet count
MODE:	.BLKW	1		;mode
INVSW:	.BLKW	1		;invert switch
HEXSW:	.BLKW	1		;hex switch
TRCSW:	.BLKW	1		;trace switch
SYNSW:	.BLKW	1		;synch switch
ASPECT:	.BLKW	1		;fold switch
RSTCNT:	.BLKW	1		;raster line count
SLPCNT:	.BLKW	1		;selected octets count
RASTER:	.BLKW	1		;raster number
BYTCNT:	.BLKW	1		;bytes remaining
INPBLK:	.BLKW	1		;input file block
INPPTR:	.BLKW	1		;input buffer pointer
OUTBLK:	.BLKW	1		;output file block
OUTPTR:	.BLKW	1		;output buffer pointer
LINCNT:	.BLKW	1		;postscript buffer bytes output
OUTSW:	.BLKW	1		;output switch
ACCUM:	.BLKW	1		;filter output
ACCMAX:	.BLKW	1		;filter max
MAXCNT:	.BLKW	1		;filter max count
SYNCNT:	.BLKW	1		;synch count
FILTER:	.BLKW	PXMAX*2		;image filter
SCANLN:	.BLKB	PXMAX		;scan line
	.EVEN
INPBUF:	.BLKW	MAXSIZ*256.	;input buffer
OUTBUF:	.BLKW	MAXSIZ*256.	;output buffer
OUTEND	=	.		;end of output buffer
;
	.END	START
                                                                                                                     